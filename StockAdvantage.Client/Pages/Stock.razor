@page "/Stock"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Stock Price Tracker</h3><br><br>
<h2>Balance: @balance</h2><br><br>
<form>
    <select id="stockSym" @bind="StockSymbol">
        <option value="">Select stock</option>
        @foreach (var stock in StockSymbols)
        {
            <option value="@stock">@stock</option>
        }
    </select>
    <p>@StockSymbol</p>
    <label for="numStock" >number of shares</label>
    <input id="numStock" name="numStock" type="number" @bind="numberOfStock"><br/>
    <input type="submit" value="buy" @onclick="CalcTotalCost" @onclick:preventDefault/>
</form><br>

<p>@numberOfStock</p>
<p>Stock Symbol: @StockSymbol</p>
<p>Current Price: @StockPrice.ToString("F2")</p>

<table>
    <thead>
        <th>
            company
        </th>
        <th>
            shares owned
        </th>
        <th>
            purchase price
        </th>
    </thead>
    <tbody id="stonkData" >
        @foreach (var stok in allStonks)
        {
            <tr>
                <td>@stok.Symbol</td>
                <td>@stok.ownedShares</td>
                <td>@stok.price.ToString("F2")</td>
            </tr>
        }
    </tbody>
</table><br/>

<form>
    <label for="profitButton">choose which to sell</label>
    <select id="profitButton" @bind="StockSymbol">
        <option value="">Select stock to sell</option>
        @foreach (var stock in allStonks)
        {
            @if (stock.ownedShares > 0)
            {
                <option value="@stock.Symbol">@stock.Symbol</option>
            }

        }
    </select><br/>
    <label for="saleDate">choose date to sell</label>
    <input id="saleDate" name="saleDate" type="date" @bind="saleDate"/><br/>

    <label for="salePrice">whatcha sellin for????</label>
    <input id="salePrice" name="salePrice" type="number" @bind="salePrice"/><br/>

    <label for="numStockSell">number of shares</label>
    <input id="numStockSell" name="numStockSell" type="number" @bind="numberOfStock"><br/>
    <input type="submit" value="sell" @onclick="Sell" @onclick:preventDefault/>
</form><br>
<p>profit: @profit</p><br/>

<h3>Portfolio</h3>
<table>
    <thead>
        <th>
            company
        </th>
        <th>
            shares owned
        </th>
        <th>
            net worth
        </th>
    </thead>
    <tbody id="stonkDataRedeux" >
    @foreach (var stok in allStonks)
    {
        @if (stok.ownedShares > 0)
        {
            <tr>
                <td>@stok.Symbol</td>
                <td>@stok.ownedShares</td>
                <td>@stok.cummulativeValue.ToString("F2")</td>
            </tr>
        }
    }
    </tbody>
</table><br/>

<table>
    <thead>
    <th>
        company
    </th>
    <th>
        shares owned
    </th>
    <th>
        purchase price
    </th>
    <th>
        profit
    </th>
    <th>
        purchase date
    </th>
    </thead>
    <tbody id="purchaseHistory" >
        @foreach (var stok in _purchaseHistory)
        {
            @if (_purchaseHistory.Count > 0)
            {
                <tr>
                    <td>@stok.Symbol</td>
                    <td>@stok.NumberOfShares</td>
                    <td>@stok.Price.ToString("F2")</td>
                    <td>@stok.Profit.ToString("F2")</td>
                    <td>@stok.PurchaseDate</td>
                </tr>
            }
        
        }
    </tbody>
</table><br/>

@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>

    <button @onclick="StartConnection">Reconnect</button>
}

@code {
    private string[] StockSymbols = {
        "AAPL", "MSFT", "GOOGL", "AMZN", "TSLA", "META", "NFLX", "NVDA", "BRK.B", "V", "JNJ", "WMT", "PG", "DIS", "KO", "PEP", "XOM", "JPM", "BABA", "AMD"
    };

    private decimal TotalCost;
    private string StockSymbol;
    private decimal StockPrice { get; set; }
    private int numberOfStock {get; set;}
    private decimal balance {get; set;} = 50000;
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    private Stonks stonks { get; set; }
    private List<Stonks> allStonks = new List<Stonks>();
    private decimal profit { get; set; }
    private DateTime saleDate = DateTime.Today;
    private decimal salePrice { get; set; }
    private decimal networth { get; set; }
    private List<PurchaseHistory> _purchaseHistory = new List<PurchaseHistory>();

    private void CalcTotalCost()
    {
        TotalCost = StockPrice * numberOfStock;

        if (balance < TotalCost)
        {
            throw new BrokeBoyException();
        }

        foreach (var stock in allStonks)
        {
            if (StockSymbol.Equals(stock.Symbol))
            {
                stock.ownedShares = numberOfStock;
                stock.price = StockPrice;
            } 
        }

        networth += TotalCost;
        balance -=TotalCost;
        PurchaseHistory purchaseHistory = new PurchaseHistory(StockSymbol, saleDate, numberOfStock, salePrice);
        _purchaseHistory.Add(purchaseHistory);
    }

    private void Sell()
    {
        
        profit = (salePrice * numberOfStock) - (StockPrice * numberOfStock);
        networth -= salePrice;
        
        balance += profit;
        PurchaseHistory purchaseHistory = new PurchaseHistory(StockSymbol, saleDate, numberOfStock, salePrice, profit);
        _purchaseHistory.Add(purchaseHistory);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
    }

    private async Task StartConnection()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            return; // Already connected
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub")) 
            .Build();

        // Listen for stock updates
        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            StockSymbol = symbol;
            StockPrice = price;

            // Debugging: Log the received values to the console
            Console.WriteLine($"Received stock update: {StockSymbol} - {StockPrice}");

            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
            _ = StartStockUpdates(); // Start the stock update loop
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
        
        foreach (var thingy in StockSymbols)
        {
            Stonks stok = new Stonks(thingy, StockPrice, numberOfStock);
            allStonks.Add(stok);
        }
    }

    private async Task StartStockUpdates()
    {
        while (IsConnected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            Console.WriteLine("Requesting stock update...");
            await Task.Delay(5000); 
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }
}
